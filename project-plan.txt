/*-------------------------------- User Stories --------------------------------*/


As a user, I want a clear landing page showing the game I will be playing, the board, and instructions so I know where I am.

As a user I want to see a clear start button so I know how to begin the game.

As a user I want visual feedback on each players move, showing if the move was a hit, miss or sink, so I know how the game is progressing.

As a user, I want a visual indication of which player's turn it is, so I know how to proceed with the game. 

As a user, I want a visual indication of a winner when all ships are destroyed, so I know what the outcome of the game is. 

As a user, I want a way to reset the game so my opponent and I can rematch. 


/*-------------------------------- Basic Game Logic --------------------------------*/


1. Start code has the basic outline of 100px X 100px board. There is also an instruction dive, game info display, and turn display. 

2. Clicking on the "Start" button should create 10 square by 10 square grid on each gameboard AND place 5 ship objects of varying length on the board. Initially these will be harded coded locations. This is a 2 player game, so the location of the ships should not be visible to the player. 
        There are 5 ships: 
        Carrier: 5 squares long
        Battleship: 4 squares long
        Submarine: 3 squares long
        Cruiser: 3 squares long
        Dingy: 2 squares long

        When placed, each of these ships will place a string associated with that that ship in the playerOne(orTwo)Board arrays below the indexs below that correspond to the same id as square in the HTML. 

        A key challenge with this will be ensuring that ships are being placed in "valid" locations. Meaning two ships can't occupy the same space AND all squares represent that "ship" must be in a straight line (vertically or horizonally) on the same row or column. 

3. On the players turn, they can click on a square on the opposing players board. On click, the game board will update by highlighting the square red (for a hit on a ship), or white (for a miss). The display will also reflect the game status.

4. Each hit will store the string name of the ship (ie carrier, battleship, submarine etc) in an array of player hits as strings. 

5. When the same string appears in the array the same amount of times === length of that boat, that boats is "sunk" and the name of that boat is added to the SunkShips array and the game display will update based on game status.  

6. When the SunkShips array length === 5 (the total number of ships) that will trigger the win condition for the player and the game is over. 

7. A reset button is available to restart the game if the player wants to play again.


/*-------------------------------- Stretch Goals --------------------------------*/


1. Adding audio feedback for hits, misses, and sinks.

2. Adding a display that shows the player which ships they have sunk of the opposing player. 

3. Each reset of the game place the ships in a new position. 

4. Allow players to pick their ship locations. 

5. Adding animation feedback for hits, misses, and sinks.

6. Add computer player functionality. 
